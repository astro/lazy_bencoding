var searchIndex = {};
searchIndex["lazy_bencoding"] = {"doc":"","items":[[3,"BEncoded","lazy_bencoding","Token iterator instance",null,null],[12,"data","","Next data to parse, only a cheap reference and updated with\neach [`next()`](#method.next)",0,null],[12,"depth","","Keeping track of the depth, for:",0,null],[4,"Token","","Token types of BEncoding",null,null],[13,"ByteString","","",1,null],[13,"Integer","","",1,null],[13,"ListStart","","",1,null],[13,"DictStart","","",1,null],[13,"End","","",1,null],[11,"clone","","",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"bencoded"}}],[11,"new","","Construct from a pointer to data",0,null],[11,"empty","","Construct with empty data,\nused for when traversing fails",0,{"inputs":[],"output":{"name":"bencoded"}}],[11,"next","","",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"is_dict","","Is the remaining `data` a dict?",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"bool"}}],[11,"is_list","","Is the remaining `data` a list?",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"bool"}}],[11,"get_byte_string","","Is the remaining `data` a string? Then get it as a cheap slice.",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"option"}}],[11,"get_utf8_string","","Is the remaining `data` a string? Then get it as checked UTF-8.",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"option"}}],[11,"get_integer","","Is the remaining `data` an integer? If so, parse and return it.",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"option"}}],[11,"this_and_rest","","Used by [`dict()`](#method.dict) and [`list()`](#method.list)",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"option"}}],[11,"list","","If the remaining data is a list, return value fulfills\n`Iterator&lt;Item=BEncoded&lt;&#39;a&gt;&gt;`",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"listiterator"}}],[11,"dict","","If the remaining data is a dict, return value fulfills\n`Iterator&lt;Item=(BEncoded&lt;&#39;a&gt;, BEncoded&lt;&#39;a&gt;)&gt;`",0,{"inputs":[{"name":"bencoded"}],"output":{"name":"dictiterator"}}],[11,"get","","From a [`dict()`](#method.dict), get the value of key\n`wanted_key`.",0,null]],"paths":[[3,"BEncoded"],[4,"Token"]]};
initSearch(searchIndex);
